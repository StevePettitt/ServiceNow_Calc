<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ux_client_script">
    <sys_ux_client_script action="INSERT_OR_UPDATE">
        <controller_preset/>
        <includes/>
        <macroponent display_value="Default">2cc5955783d642108d3d71a6feaad3cb</macroponent>
        <name>btn_input_generic</name>
        <preset/>
        <required_translations>[
    
]</required_translations>
        <script><![CDATA[/**
 * @param {params} params
 * @param {api} params.api
 * @param {any} params.event
 * @param {any} params.imports
 * @param {ApiHelpers} params.helpers
 */



function handler({
    api,
    event,
    helpers,
    imports
}) {

    const x = event.payload.btn;
    const num = '1234567890';
    const ops = '/*+-';
    const dp = '.';
    var calc;

    //Execute this if it's a number
    if (num.includes(x)) {
        if (api.state.Overwrite) {
            api.setState('Display', x);
            api.setState('Overwrite', false);
        } else {
            api.setState('Display', api.state.Display + x);
        }
    }

    //Execute this if it's a decimal point
    if (x.includes(dp)) {
        if (api.state.Overwrite) {
            api.setState('Display', '0.');
            api.setState('Overwrite', false);
        } else {
            if (!api.state.Display.includes(dp)) {
                api.setState('Display', api.state.Display + dp);
            }
        }
    }

    //operator
    //if         start of calculation: first number in display only
    //if else    stored first# and Op; second in display and new op in payload
    if (ops.includes(x) && api.state.FirstNumber === "") {
        api.setState('Overwrite', true);
        api.setState('Operator', x);
        api.setState('FirstNumber', api.state.Display);
    } else if (ops.includes(x) && api.state.FirstNumber !== "" && api.state.Overwrite === false) {
        switch (api.state.Operator) {
            case '+':
                calc = Number(api.state.FirstNumber) + Number(api.state.Display);
                break;
            case '-':
                calc = Number(api.state.FirstNumber) - Number(api.state.Display);
                break;
            case '/':
                calc = Number(api.state.FirstNumber) / Number(api.state.Display);
                break;
            case '*':
                calc = Number(api.state.FirstNumber) * Number(api.state.Display);
                break;
        }
        api.setState('LastNumber', api.state.Display);
        api.setState('Display', calc);
        api.setState('FirstNumber', calc);
        api.setState('Operator', x);
        api.setState('Overwrite', true);
    } 
    //////////////////////////////////////////////////////////////////////////////////
    //equals

    //execute for equals
    //if        one input / operator - no second number in display or storage
    //else if   input, an operator and 2nd input in storage
    //else if   input, an operator and 2nd input in display

    if (x == "=" && api.state.FirstNumber !== "" && api.state.Overwrite && api.state.LastNumber === "") {
        switch (api.state.Operator) {
            case '+':
                calc = Number(api.state.FirstNumber) + Number(api.state.FirstNumber);
                break;
            case '-':
                calc = Number(api.state.FirstNumber) - Number(api.state.FirstNumber);
                break;
            case '/':
                calc = Number(api.state.FirstNumber) / Number(api.state.FirstNumber);
                break;
            case '*':
                calc = Number(api.state.FirstNumber) * Number(api.state.FirstNumber);
                break;
        }
        api.setState('LastNumber', api.state.FirstNumber);
        api.setState('Display', calc);
        api.setState('FirstNumber', calc);

    } else if (x == "=" && api.state.FirstNumber !== "" && api.state.Overwrite && api.state.LastNumber !== "") {
        switch (api.state.Operator) {
            case '+':
                calc = Number(api.state.FirstNumber) + Number(api.state.LastNumber);
                break;
            case '-':
                calc = Number(api.state.FirstNumber) - Number(api.state.LastNumber);
                break;
            case '/':
                calc = Number(api.state.FirstNumber) / Number(api.state.LastNumber);
                break;
            case '*':
                calc = Number(api.state.FirstNumber) * Number(api.state.LastNumber);
                break;
        }
        api.setState('Display', calc);
        api.setState('FirstNumber', calc);
        
    } else if (x == "=" && api.state.FirstNumber !== "" && !api.state.Overwrite) {
        switch (api.state.Operator) {
            case '+':
                calc = Number(api.state.FirstNumber) + Number(api.state.Display);
                break;
            case '-':
                calc = Number(api.state.FirstNumber) - Number(api.state.Display);
                break;
            case '/':
                calc = Number(api.state.FirstNumber) / Number(api.state.Display);
                break;
            case '*':
                calc = Number(api.state.FirstNumber) * Number(api.state.Display);
                break;
        }
        api.setState('LastNumber', api.state.Display);
        api.setState('Display', calc);
        api.setState('FirstNumber', calc);
        api.setState('Operator', x);
        api.setState('Overwrite', true);
    }


    //this will pick up all the other buttons
    switch (x) {
        case 'NEG':
            api.setState('Display', String(0 - Number(api.state.Display)));
            break;
        case 'CANCEL':
            api.setState('Display', 0);
            api.setState('Overwrite', true);
            api.setState('Operator', '');
            api.setState('FirstNumber', '');
            api.setState('LastNumber', '');
            break;
        case 'LOG':
            api.setState('Display', Math.log10(Number(api.state.Display)));
            api.setState('Overwrite', true);
            break;
        case 'ANTILOG':
            api.setState('Display', Math.pow(10, Number(api.state.Display)));
            api.setState('Overwrite', true);
            break;

    }

    /*   #########   Known defects    ##########
    1	Values input via the PC keyboard give unexpected results. Example: position cursor, type “100”, and hit Log gives “0.301…” instead of 2.
    2	Errors are shown as error codes, not in plain English. An error handler should cover this to give consistent results.
    3	Some rounding errors on log(antilog(x))
    4   refactoring required

    */
}]]></script>
        <script_api_version>2.0.0</script_api_version>
        <sys_class_name>sys_ux_client_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-05-26 21:20:36</sys_created_on>
        <sys_id>ed36bb9b83d282108d3d71a6feaad3b7</sys_id>
        <sys_mod_count>29</sys_mod_count>
        <sys_name>btn_input_generic</sys_name>
        <sys_package display_value="Calc" source="x_1413035_calc">836da89d83da02108d3d71a6feaad32c</sys_package>
        <sys_policy/>
        <sys_scope display_value="Calc">836da89d83da02108d3d71a6feaad32c</sys_scope>
        <sys_update_name>sys_ux_client_script_ed36bb9b83d282108d3d71a6feaad3b7</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-06-10 21:55:33</sys_updated_on>
        <target>macroponent</target>
        <type>default</type>
    </sys_ux_client_script>
</record_update>
